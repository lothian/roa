mywfn = 'cc2'
mybasis = 'cc-pvdz'
wavelength = 532.0
wavelength_unit = 'nm'
print_out("Using a wavelength of %f %s\n" % (wavelength, wavelength_unit))
myresponse_disp_size = 0.005
memory 10 GB

# must put the optimized geometry here!
molecule mol {
 0 1
  C     0.9611327931  -0.6940650436  -0.1157954926
  H     0.8471848236  -1.1951015592  -1.0850054541
  H     1.7715836343  -1.0690374859   0.5205384199
  C    -0.2121435350  -0.0464074692   0.4940063088
  H    -0.2210077715   0.0511555387   1.5889279280
  O     0.8147961559   0.7431181430  -0.1458323841
  C    -1.5574224002  -0.0516003804  -0.1807845796
  H    -1.4330038751  -0.1479750012  -1.2701798805
  H    -2.0963349845   0.8874228635   0.0238394108
  H    -2.1739531785  -0.8892123085   0.1856249626
  units Angstrom
}
set {
  basis $mybasis
  scf_type pk
}
energy(mywfn)
mol = psi4.get_active_molecule()
mol.fix_orientation(True)
mol.fix_com(True)
mol.reset_point_group('c1')

outDictName = 'review' + mybasis + '_' + mywfn + '_' + mol.name() + '_' + str(wavelength)+'.dict'

import roa
mol     = psi4.get_active_molecule()
geom    = mol.geometry().np
Natom   = mol.natom()
masses  = np.array( [mol.mass(i) for i in range(Natom)] )
omega   = roa.omega_in_au(wavelength,wavelength_unit)
hessian = roa.psi4_read_hessian(Natom)
dipder  = roa.psi4_read_dipole_derivatives(Natom)
fd_pol  = roa.psi4_read_polarizabilities(Natom, omega)
fd_rot  = roa.psi4_read_optical_rotation_tensor(Natom, omega)
fd_quad = roa.psi4_read_dipole_quadrupole_polarizability(Natom, omega)
step    = myresponse_disp_size

#print_out(Natom)
#print_out(hessian)
#print_out(dipder)
#print_out(fd_pol[29])
#print_out(fd_rot[29])
#print_out(fd_quad[29])

roa.scatter(geom, masses, hessian, dipder, omega, step, fd_pol, fd_rot, fd_quad,
            print_lvl=1, ROAdictName=outDictName, pr=core.print_out)

